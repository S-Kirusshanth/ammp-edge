name: ammp-edge
version: git
summary: Edge application for AMMP
description: |
    Manages data collection and forwarding for AMMP, the Asset Monitoring and Management Platform.
    https://www.ammp.io/
    https://github.com/ammpio/ammp-edge

grade: stable
confinement: strict

base: core18

architectures:
  - build-on: amd64
  - build-on: armhf
  - build-on: arm64

epoch: 1

apps:
  ae-init:
    command: bin/ae init
    daemon: simple
    restart-condition: always
    restart-delay: 2s
  ammp-edge:
    command: bin/ammp_edge
    daemon: simple
    restart-condition: always
    after: [ae-init]
    plugs:
      - network
      - network-bind
      - system-observe
      - hardware-observe
      - network-observe
      - serial-port
      - log-observe
    # The following is required in order to make libblas3 visible to nmap
    environment:
      LD_LIBRARY_PATH: "$LD_LIBRARY_PATH:$SNAP/usr/lib/$SNAPCRAFT_ARCH_TRIPLET/blas"
  web-ui:
    command: python3 -m flask run
    daemon: simple
    restart-condition: always
    after: [ae-init]
    plugs:
      - network-bind
    environment:
      FLASK_APP: web_ui
      FLASK_RUN_HOST: 0.0.0.0
      FLASK_RUN_PORT: 8000
      LC_ALL: C.UTF-8
      LANG: C.UTF-8
      LD_LIBRARY_PATH: "$LD_LIBRARY_PATH:$SNAP/usr/lib/$SNAPCRAFT_ARCH_TRIPLET/blas"
  nmap:
    command: nmap
    environment:
      LD_LIBRARY_PATH: "$LD_LIBRARY_PATH:$SNAP/usr/lib/$SNAPCRAFT_ARCH_TRIPLET/blas"
    plugs: [network, network-bind, network-control]
  wifi-ap-control:
    command: bin/wifi_ap_control
    daemon: simple
    restart-condition: on-abnormal
    plugs: [network]
  env-scan:
    command: bin/env_scan_svc
    daemon: simple
    plugs: [network, network-observe]
    timer: 0:00~24:00/36
    environment:
      LD_LIBRARY_PATH: "$LD_LIBRARY_PATH:$SNAP/usr/lib/$SNAPCRAFT_ARCH_TRIPLET/blas"
  mosquitto:
    command: bin/mosquitto_svc.sh
    daemon: simple
    restart-condition: always
    restart-delay: 2s
    after: [ae-init]
    plugs: [network, network-bind]

parts:
  ammp-edge:
    plugin: python
    python-version: python3
    source: src
    stage-packages:
      - libsnmp-dev
    stage-snaps:
      - nmap
    stage:
      - -usr/lib/aarch64-linux-gnu/libsqlite3.so.0
      - -usr/lib/aarch64-linux-gnu/libsqlite3.so.0.8.6
    override-prime: |
      snapcraftctl prime
      "${SNAPCRAFT_PRIME}"/usr/bin/python3 \
        -m compileall \
        -q \
        --workers 0 \
        "${SNAPCRAFT_PRIME}"
  configs:
    plugin: dump
    source: config
    prime:
      - mosquitto.conf.tpl
      - mqtt-bridge.conf.tpl
      - mqtt-bridge-stage.conf.tpl
  resources:
    plugin: dump
    source: resources
    organize:
      '*': resources/
    prime: [resources]
  drivers:
    plugin: dump
    source: drivers
    organize:
      '*': drivers/
    prime: [drivers]
  bin:
    plugin: dump
    source: bin
    organize:
      '*': bin/
    prime: 
     - bin
  ae:
    plugin: rust
    source: rust
  envsubst:
    plugin: nil
    stage-packages:
     - gettext-base
    prime:
     - usr/bin/envsubst
  mosquitto:
    plugin: make
    make-parameters: 
     - "prefix=/usr"
     - "WITH_DOCS=no"
     - "WITH_CJSON=no"
     - "WITH_ADNS=yes"
     - "CFLAGS=-Wall -ggdb -O2 -I$SNAPCRAFT_STAGE/include -D_GNU_SOURCE"
    source: https://github.com/eclipse/mosquitto
    source-type: git
    source-tag: v2.0.14
    source-depth: 1
    build-packages:
      - libssl-dev
      - gcc
      - g++
    stage-packages:
      - libssl1.0.0
    prime:
      - usr/sbin/mosquitto
      - usr/lib/libmosquitto.so*
      - lib/*-linux-gnu/libcrypto.so*
      - lib/*-linux-gnu/libssl.so*
      - usr/include/mosquitto.h
      - usr/include/mosquitto_broker.h
      - usr/include/mosquitto_plugin.h
      - usr/include/mqtt_protocol.h
  libsqlite3:
    source: https://sqlite.org/2022/sqlite-autoconf-3380400.tar.gz
    plugin: autotools
    stage:
      - lib/libsqlite3.so
      - lib/libsqlite3.so.0
      - lib/libsqlite3.so.0.8.6

plugs:
  provisioning-edge:
    interface: content
    content: ammp-edge-provisioning
    target: $SNAP/provisioning
  wifi-ap-control:
    interface: content
    content: socket-directory
    target: $SNAP_DATA/sockets/wifi-ap
